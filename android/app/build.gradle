apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'
react {
    /* Folders */
    // root = file("../")
    // reactNativeDir = file("../node_modules/react-native")
    // codegenDir = file("../node_modules/@react-native/codegen")
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    // nodeExecutableAndArgs = ["node"]
    // bundleCommand = "ram-bundle"
    // bundleConfig = file(../rn-cli.config.js)
    // bundleAssetName = "MyApplication.android.bundle"
    // entryFile = file("../js/MyApplication.android.js")
    // extraPackagerArgs = []

    /* Hermes Commands */
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */


/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.kaamsathi"
    defaultConfig {
        applicationId "com.kaamsathi"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        
         release {
             minifyEnabled true
        shrinkResources true


            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            debuggable false // Ensure that debug info is not included in release builds
        }

    }
      splits {
         abi {
             enable true
             reset()
             include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
             universalApk false // Do not generate a universal APK
         }
     }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            project.ext { appName = 'KaamSathi' }
            def formattedDate = new Date().format('dd.MM HH.mm').replace(" ", " B")
            def newName = output.outputFile.name.replace("app-", "$project.ext.appName-").replace("-release", " V" + formattedDate)
            output.outputFileName = newName
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-ssl-pinning')

    implementation project(':react-native-permissions')
    if (project.hasProperty("hermesEnabled") && hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

        implementation(project(':react-native-geolocation-service')) {
        exclude group: 'com.google.android.gms', module: 'play-services-location'
    }
    implementation 'com.google.android.gms:play-services-location:21.0.1'


}

apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
apply plugin: 'com.google.gms.google-services' 
applyNativeModulesAppBuildGradle(project)
